#!/usr/bin/env python3
"""This script reads data files for each scenario, constructs insert queries to insert data into 'usa_mrdd_data' table.
   It will append generated insert queries into 'queries_mrdd_usa_data.sql'.
   
Created : 07/21/2020

By Komal K. Dudakiya

"""

import csv
import re
import os
import sys
from pathlib import Path

def readData(inScenarioId, inDataTable, inDataDir, OutFile):
    
    #print(f"readData() Started")
    
    #nssac_ncov_ro_08-22-2020.csv
    file_name_pattern = re.compile('^(.+)_([0-1][0-9]-[0-3][0-9]-[0-9]{4})$')

    data_table = str(inDataTable)
    #schema_name = os.environ["SCHEMA_NAME"]
    #data_table = f"{schema_name}.{str(inDataTable)}"
    #print(f"#73 - data_table = {data_table}")

    out_file = open(OutFile, "a+")
    out_file.write(f'-- script generated by gen_mrdd_usa_data_queries.py --\n')
    #out_file.write("\n-----------------------------------------------\n")

    i = 1
    while i < 15:
      duration_dir = inDataDir + "/duration" + str(i)
      data_dir_path = Path(duration_dir)
    
	  #data_dir_path = Path(inDataDir)

      # Collect the input data (and get the output files ready)
      #nssac_ncov_ro_08-22-2020.csv
      for file_path in sorted(data_dir_path.glob('nssac_ncov_ro_??-*.csv')):
          #print(f"processing {file_path}")

          file_name_prefix = file_name_pattern.match(file_path.stem)[1]
          date_string = file_name_pattern.match(file_path.stem)[2]
          #print(f"file_name_prefix = {file_name_prefix}    date_string = {date_string}")

          with file_path.open() as csv_file:
              next(csv_file) # skip first line - headers
              csv_reader = csv.reader(csv_file, delimiter = ',')

              for row in csv_reader:

                  # scenario_id,region_id,region_name,reported_date,weekly_hospitalizations_med,weekly_hospitalizations_lower_bound,
                  # weekly_hospitalizations_upper_bound, max_daily_occupancy,max_daily_occupancy_lower_bound,
                  # max_daily_occupancy_upper_bound, last_update
                  insert_str = f'INSERT INTO {data_table} (scenario_id,region_id,region_name,reported_date,weekly_hospitalizations_med,weekly_hospitalizations_lower_bound,weekly_hospitalizations_upper_bound, max_daily_occupancy,max_daily_occupancy_lower_bound,max_daily_occupancy_upper_bound, last_update, duration) VALUES '+"\n"

                  # Remove any starting and trailing whitespace from each field
                  row = [field.strip() for field in row]
                  #print(f"Current row = {row}")

                  scenario_id = inScenarioId
                  region_name = row[0]
                  region_id = row[1]
                  reported_date = date_string
                  weekly_hospitalizations_med = row[3]
                  weekly_hospitalizations_lower_bound = row[4]
                  weekly_hospitalizations_upper_bound = row[5]
                  max_daily_occupancy = row[10]
                  max_daily_occupancy_lower_bound = row[11]
                  max_daily_occupancy_upper_bound = row[12]
                  last_update=row[13]
                  duration = i
                
                  #print(f"scenario_id={scenario_id}, region_name={region_name}, region_id={region_id}, reported_date={reported_date}, weekly_hospitalizations_med={weekly_hospitalizations_med}, weekly_hospitalizations_lower_bound={weekly_hospitalizations_lower_bound}, weekly_hospitalizations_upper_bound={weekly_hospitalizations_upper_bound}, max_daily_occupancy={max_daily_occupancy}, max_daily_occupancy_lower_bound={max_daily_occupancy_lower_bound}, max_daily_occupancy_upper_bound={max_daily_occupancy_upper_bound}, last_update={last_update}, ")

                  insert_str += f"('{scenario_id}','{region_name}','{region_id}','{reported_date}',{weekly_hospitalizations_med},{weekly_hospitalizations_lower_bound},{weekly_hospitalizations_upper_bound},{max_daily_occupancy},{max_daily_occupancy_lower_bound},{max_daily_occupancy_upper_bound},'{last_update}',{duration}),\n"

                  #print(f"current_insert_str = {insert_str}")
                  out_file.write(f"{insert_str[:-2]};"+"\n")
      i += 1
    
    #out_file.write(f"SELECT COUNT(*) AS DATA_RECORDS_INSERTED FROM {data_table};")
    #out_file.write(f"\\q \n")
    #out_file.close()

def main():
    #print(f"main() Started")
    argScenarioId = sys.argv[1]
    argDataTable = sys.argv[2]
    argDataDir = sys.argv[3]
    argOutFile = sys.argv[4]
    #print(f"#212 - main():argScenarioId={argScenarioId}, argDataTable={argDataTable}, argDataDir={argDataDir}, argOutFile={argOutFile}")
    readData(argScenarioId, argDataTable, argDataDir, argOutFile)

if __name__ == '__main__':
   main()

